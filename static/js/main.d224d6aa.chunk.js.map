{"version":3,"sources":["components/buttons/ButtonsLoad.js","components/buttons/Buttons.js","serviceWorker.js","index.js"],"names":["ButtonsLoad","props","changeImageText","button","originalBackgroundImage","audioContext","style","fontSize","backgroundImage","disabled","id","className","title","buttons","map","item","i","key","src","soundPath","type","imageClass","onClick","document","getElementById","audio","play","onended","playSound","name","Buttons","animals","musicalInstruments","vowels","numbers","onChange","value","console","log","scaleSound","defaultValue","min","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2jHAGe,SAASA,EAAYC,GAenC,SAASC,EAAgBC,EAAQC,EAAyBC,GACtDA,GACFF,EAAOG,MAAMC,SAAW,OACxBJ,EAAOG,MAAME,gBAAkB,OAC/BL,EAAOM,UAAW,IAElBN,EAAOG,MAAMC,SAAW,EACxBJ,EAAOG,MAAME,gBAAkBJ,EAC/BD,EAAOM,UAAW,GAIpB,OACG,yBAAKC,GAAG,aACT,wBAAIC,UAAU,SAASV,EAAMW,OAC3B,yBAAKF,GAAG,qBAERT,EAAMY,QAAQC,KAAI,SAASC,EAAMC,GAChC,OACC,yBAAKL,UAAU,eAAeM,IAAKD,GAClC,2BAAON,GAAIK,EAAKL,GAAK,SACpB,4BAAQQ,IAAKH,EAAKI,UAAWC,KAAK,eAEnC,4BACCT,UAAWI,EAAKL,GAAK,IAAMT,EAAMoB,WACjCX,GAAIK,EAAKL,GAAK,SACdY,QAAS,YAvChB,SAAmBZ,GACnB,IAAIP,EAASoB,SAASC,eAAed,EAAG,UACpCN,EAA0BD,EAAOG,MAAME,gBACvCiB,EAAQF,SAASC,eAAed,EAAG,SAEvCR,EAAgBC,EAAQC,EAAyB,GAEjDqB,EAAMC,OACND,EAAME,QAAU,WACfzB,EAAgBC,EAAQC,EAAyB,IA8B3BwB,CAAUb,EAAKL,MAC9BK,EAAKc,Y,gCCrCA,SAASC,IAMvB,OACG,yBAAKpB,GAAG,aAET,kBAACV,EAAD,CACCY,MAAO,WACPC,QAASkB,EACTV,WAAY,sBAGb,kBAACrB,EAAD,CACCY,MAAO,yBACPC,QAASmB,EACTX,WAAY,iCAGb,kBAACrB,EAAD,CACCY,MAAO,UACPC,QAASoB,EACTZ,WAAY,iBAGb,kBAACrB,EAAD,CACCY,MAAO,UACPC,QAASqB,EACTb,WAAY,kBAGb,yBAAKV,UAAU,kBACd,2BAAOwB,SAAU,SAAAC,GAAK,OAhCzB,SAAoBA,GACnBC,QAAQC,IAAIF,GA+BcG,CAAWH,IAAQI,aAAa,IAAIpB,KAAK,QAAQqB,IAAI,IAAIC,IAAI,KAAK/B,UAAU,SAASD,GAAG,cC9BhGiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.d224d6aa.chunk.js","sourcesContent":["import React from 'react';\nimport '../../css/Buttons.css';\n\nexport default function ButtonsLoad(props) {\n\n  function playSound(id){\n\t\tlet button = document.getElementById(id+\"Button\");\n\t\tlet originalBackgroundImage = button.style.backgroundImage;\n\t\tlet audio = document.getElementById(id+\"Sound\");\n\n\t\tchangeImageText(button, originalBackgroundImage, 1);\n\n\t\taudio.play();\n\t\taudio.onended = function() {\n\t\t\tchangeImageText(button, originalBackgroundImage, 0);\n\t\t};\n\t}\n\n\tfunction changeImageText(button, originalBackgroundImage, audioContext){\n\t\tif(audioContext){\n\t\t\tbutton.style.fontSize = '20px';\n\t\t\tbutton.style.backgroundImage = 'none';\n\t\t\tbutton.disabled = true;\n\t\t}else{\n\t\t\tbutton.style.fontSize = 0;\n\t\t\tbutton.style.backgroundImage = originalBackgroundImage;\n\t\t\tbutton.disabled = false;\n\t\t}\n\t}\n\n\treturn (\n    <div id=\"container\">\n\t\t\t<h1 className=\"title\">{props.title}</h1>\n    \t<div id=\"container-buttons\">\n\t\t\t\t{\t\n\t\t\t\t\tprops.buttons.map(function(item, i){\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"containerInn\" key={i}>\n\t\t\t\t\t\t\t\t<audio id={item.id + 'Sound'}>\n\t\t\t\t\t\t\t\t\t<source src={item.soundPath} type=\"audio/wav\" />\n\t\t\t\t\t\t\t\t</audio>\n\t\t\t\t\t\t\t\t<button \n\t\t\t\t\t\t\t\t\tclassName={item.id + \" \" + props.imageClass}\n\t\t\t\t\t\t\t\t\tid={item.id + 'Button'} \n\t\t\t\t\t\t\t\t\tonClick={() => {playSound(item.id)}}>\n\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t</button>\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n  );\n}\n","import React from \"react\";\nimport '../../css/Buttons.css';\nimport ButtonsLoad from \"./ButtonsLoad\";\nimport animals from \"../../json/animals.json\";\nimport musicalInstruments from \"../../json/musicalInstruments.json\";\nimport vowels from \"../../json/vowels.json\";\nimport numbers from \"../../json/numbers.json\";\n\nexport default function Buttons() {\n\t\n\tfunction scaleSound(value){\n\t\tconsole.log(value);\n\t}\n\n\treturn (\n    <div id=\"container\">\n\n\t\t\t<ButtonsLoad\n\t\t\t\ttitle={'Animales'}\n\t\t\t\tbuttons={animals}\n\t\t\t\timageClass={'buttonAnimalSound'}\n\t\t\t/>\n\n\t\t\t<ButtonsLoad\n\t\t\t\ttitle={'Instrumentos musicales'}\n\t\t\t\tbuttons={musicalInstruments}\n\t\t\t\timageClass={'buttonMusicalInstrumentSound'}\n\t\t\t/>\n\n\t\t\t<ButtonsLoad\n\t\t\t\ttitle={'Vocales'}\n\t\t\t\tbuttons={vowels}\n\t\t\t\timageClass={'buttonVowels'}\n\t\t\t/>\n\n\t\t\t<ButtonsLoad\n\t\t\t\ttitle={'Numeros'}\n\t\t\t\tbuttons={numbers}\n\t\t\t\timageClass={'buttonNumbers'}\n\t\t\t/>\n\n\t\t\t<div className=\"slidecontainer\">\n\t\t\t\t<input onChange={value=>scaleSound(value)} defaultValue=\"5\" type=\"range\" min=\"0\" max=\"10\" className=\"slider\" id=\"myRange\"/>\n\t\t\t</div>\n\n\t\t</div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Buttons from './components/buttons/Buttons.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Buttons />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}